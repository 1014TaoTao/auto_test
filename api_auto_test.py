# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'api_auto_test_ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import logging
import sys

from PyQt5 import QtCore, QtGui
from PyQt5 import QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow, QPlainTextEdit

from main import run_api
from common import setting
from common.readConfigYaml import Config
from tools.api_tool_open_html import OpenHtml


# 重定向
class Handler(QtCore.QObject, logging.Handler):
    new_record = QtCore.pyqtSignal(object)

    def emit(self, record):
        self.setFormatter(
            logging.Formatter(u'[时间]:%(asctime)s-[级别]:%(levelname)s-[文件]:%(filename)s-[信息]:%(message)s')
        )
        msg = self.format(record)
        self.new_record.emit(msg)


class UiApiAutoTool(object):
    def __init__(self):
        self.delete_old_report_on_off_list = Config().get_delete_report_on_off()
        self.save_report_on_off_list = Config().get_run_report_on_off()
        self.open_report_on_off_list = Config().get_open_report_on_off()
        self.email_on_off_list = Config().get_send_email_on_off()
        self.dingding_on_off_list = Config().get_send_dingding_news_on_off()
        self.tester_list = Config().get_testers()
        self.test_case_list = setting.TEST_CASE_LIST
        self.emvironment_list = Config().get_environment()

    def setupUi(self, ApiAutoTool):
        # 下面将输出重定向到textEdit中
        ApiAutoTool.setObjectName("ApiAutoTool")
        ApiAutoTool.resize(640, 580)
        ApiAutoTool.setMinimumSize(QtCore.QSize(640, 520))
        ApiAutoTool.setSizeIncrement(QtCore.QSize(640, 520))
        ApiAutoTool.setBaseSize(QtCore.QSize(640, 520))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("./static/ico/win.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        ApiAutoTool.setWindowIcon(icon)
        ApiAutoTool.setStyleSheet("font: 12pt \"微软雅黑\";")
        self.centralwidget = QtWidgets.QWidget(ApiAutoTool)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setSpacing(6)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.selectEnvTitle = QtWidgets.QLabel(self.centralwidget)
        self.selectEnvTitle.setStyleSheet("background-color: rgb(255, 0, 0);")
        self.selectEnvTitle.setObjectName("selectEnvTitle")
        self.horizontalLayout_6.addWidget(self.selectEnvTitle, 0, QtCore.Qt.AlignHCenter)
        self.verticalLayout.addLayout(self.horizontalLayout_6)
        self.formLayout = QtWidgets.QFormLayout()
        self.formLayout.setObjectName("formLayout")
        self.testcase_txt = QtWidgets.QLabel(self.centralwidget)
        self.testcase_txt.setObjectName("testcase_txt")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.testcase_txt)
        self.testCasePathBox = QtWidgets.QComboBox(self.centralwidget)
        self.testCasePathBox.setObjectName("testCasePathBox")
        self.testCasePathBox.addItems(self.test_case_list)

        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.testCasePathBox)
        self.verticalLayout.addLayout(self.formLayout)
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.formLayout_5 = QtWidgets.QFormLayout()
        self.formLayout_5.setObjectName("formLayout_5")
        self.deletereport_txt = QtWidgets.QLabel(self.centralwidget)
        self.deletereport_txt.setObjectName("deletereport_txt")
        self.formLayout_5.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.deletereport_txt)
        self.deleteReportBox = QtWidgets.QComboBox(self.centralwidget)
        self.deleteReportBox.setObjectName("deleteReportBox")
        self.deleteReportBox.addItems(self.delete_old_report_on_off_list)

        self.formLayout_5.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.deleteReportBox)
        self.gridLayout.addLayout(self.formLayout_5, 0, 0, 1, 1)
        self.formLayout_3 = QtWidgets.QFormLayout()
        self.formLayout_3.setObjectName("formLayout_3")
        self.saverepor_txt = QtWidgets.QLabel(self.centralwidget)
        self.saverepor_txt.setObjectName("saverepor_txt")
        self.formLayout_3.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.saverepor_txt)
        self.reportRunBox = QtWidgets.QComboBox(self.centralwidget)
        self.reportRunBox.setObjectName("reportRunBox")
        self.reportRunBox.addItems(self.save_report_on_off_list)

        self.formLayout_3.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.reportRunBox)
        self.gridLayout.addLayout(self.formLayout_3, 0, 1, 1, 1)
        self.formLayout_2 = QtWidgets.QFormLayout()
        self.formLayout_2.setObjectName("formLayout_2")
        self.send_email_txt = QtWidgets.QLabel(self.centralwidget)
        self.send_email_txt.setObjectName("send_email_txt")
        self.formLayout_2.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.send_email_txt)
        self.sendEmailBox = QtWidgets.QComboBox(self.centralwidget)
        self.sendEmailBox.setObjectName("endEmailBox")
        self.sendEmailBox.addItems(self.email_on_off_list)

        self.formLayout_2.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.sendEmailBox)
        self.gridLayout.addLayout(self.formLayout_2, 0, 2, 1, 1)
        self.formLayout_6 = QtWidgets.QFormLayout()
        self.formLayout_6.setObjectName("formLayout_6")
        self.opneNewReportBox = QtWidgets.QComboBox(self.centralwidget)
        self.opneNewReportBox.setObjectName("opneNewReportBox")
        self.opneNewReportBox.addItems(self.open_report_on_off_list)

        self.formLayout_6.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.opneNewReportBox)
        self.open_report_txt = QtWidgets.QLabel(self.centralwidget)
        self.open_report_txt.setObjectName("open_report_txt")
        self.formLayout_6.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.open_report_txt)
        self.gridLayout.addLayout(self.formLayout_6, 1, 0, 1, 1)
        self.formLayout_7 = QtWidgets.QFormLayout()
        self.formLayout_7.setObjectName("formLayout_7")
        self.tester_txt = QtWidgets.QLabel(self.centralwidget)
        self.tester_txt.setObjectName("tester_txt")
        self.formLayout_7.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.tester_txt)
        self.testerBox = QtWidgets.QComboBox(self.centralwidget)
        self.testerBox.setObjectName("testerBox")
        self.testerBox.addItems(self.tester_list)

        self.formLayout_7.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.testerBox)
        self.gridLayout.addLayout(self.formLayout_7, 1, 1, 1, 1)
        self.formLayout_4 = QtWidgets.QFormLayout()
        self.formLayout_4.setObjectName("formLayout_4")
        self.send_dingding_txt = QtWidgets.QLabel(self.centralwidget)
        self.send_dingding_txt.setObjectName("send_dingding_txt")
        self.formLayout_4.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.send_dingding_txt)
        self.sendDingDingBox = QtWidgets.QComboBox(self.centralwidget)
        self.sendDingDingBox.setObjectName("sendDingDingBox")
        self.sendDingDingBox.addItems(self.dingding_on_off_list)
        self.formLayout_4.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.sendDingDingBox)
        self.gridLayout.addLayout(self.formLayout_4, 1, 2, 1, 1)
        self.verticalLayout.addLayout(self.gridLayout)

        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")

        self.formLayout_8 = QtWidgets.QFormLayout()
        self.formLayout_8.setObjectName("formLayout_8")
        self.emvironmenttxt = QtWidgets.QLabel(self.centralwidget)
        self.emvironmenttxt.setObjectName("emvironmenttxt")
        self.formLayout_8.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.emvironmenttxt)
        self.emvironment_listBox = QtWidgets.QComboBox(self.centralwidget)
        self.emvironment_listBox.setObjectName("emvironment_listBox")
        self.emvironment_listBox.addItems(self.emvironment_list)
        self.formLayout_8.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.emvironment_listBox)
        self.horizontalLayout_7.addLayout(self.formLayout_8)

        self.formLayout_9 = QtWidgets.QFormLayout()
        self.formLayout_9.setObjectName("formLayout_9")
        self.loginTitletxt = QtWidgets.QLabel(self.centralwidget)
        self.loginTitletxt.setObjectName("loginTitletxt")
        self.formLayout_9.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.loginTitletxt)
        self.loginTitleBox = QtWidgets.QComboBox(self.centralwidget)
        self.loginTitleBox.setObjectName("loginTitleBox")
        self.formLayout_9.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.loginTitleBox)
        self.horizontalLayout_7.addLayout(self.formLayout_9)

        self.verticalLayout.addLayout(self.horizontalLayout_7)

        self.emvironment_listBox.currentTextChanged.connect(lambda: self.updateLoginTitleBox_info())

        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.horizontalLayout_5.addWidget(self.line)
        self.verticalLayout.addLayout(self.horizontalLayout_5)

        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.runButton = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.runButton.sizePolicy().hasHeightForWidth())
        self.runButton.setSizePolicy(sizePolicy)
        self.runButton.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.runButton.setStyleSheet("background-color: rgb(85, 255, 127);")
        self.runButton.setObjectName("runButton")
        self.horizontalLayout_2.addWidget(self.runButton)
        self.verticalLayout.addLayout(self.horizontalLayout_2)

        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.resultLogEdit = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.resultLogEdit.setStyleSheet("background-color: rgb(0, 0, 0);\n"
                                         "color: rgb(255, 0, 0);")
        self.resultLogEdit.setObjectName("resultLogEdit")
        # 不换行
        self.resultLogEdit.setLineWrapMode(QPlainTextEdit.NoWrap)

        self.resultLogEdit.setReadOnly(True)
        self.horizontalLayout_3.addWidget(self.resultLogEdit)
        # 实时显示输出, 将控制台的输出重定向到界面中
        handler = Handler()
        logging.getLogger().addHandler(handler)
        handler.new_record.connect(self.resultLogEdit.appendPlainText)
        self.verticalLayout.addLayout(self.horizontalLayout_3)

        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.horizontalLayout_4.addWidget(self.line_2)
        self.verticalLayout.addLayout(self.horizontalLayout_4)

        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.seeReportButton = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.seeReportButton.sizePolicy().hasHeightForWidth())
        self.seeReportButton.setSizePolicy(sizePolicy)
        self.seeReportButton.setStyleSheet("background-color: rgb(255, 255, 127);")
        self.seeReportButton.setObjectName("seeReportButton")
        self.horizontalLayout.addWidget(self.seeReportButton)
        self.resetButton = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.resetButton.sizePolicy().hasHeightForWidth())
        self.resetButton.setSizePolicy(sizePolicy)
        self.resetButton.setStyleSheet("background-color: rgb(170, 170, 255);")
        self.resetButton.setObjectName("resetButton")
        self.horizontalLayout.addWidget(self.resetButton)
        self.verticalLayout.addLayout(self.horizontalLayout)

        ApiAutoTool.setCentralWidget(self.centralwidget)
        self.retranslateUi(ApiAutoTool)
        self.runButton.clicked.connect(lambda: self.runButton_info())
        self.seeReportButton.clicked.connect(lambda: OpenHtml().see_html())
        self.resetButton.clicked.connect(self.resultLogEdit.clear)

        QtCore.QMetaObject.connectSlotsByName(ApiAutoTool)

    def retranslateUi(self, ApiAutoTool):
        _translate = QtCore.QCoreApplication.translate
        ApiAutoTool.setWindowTitle(_translate("ApiAutoTool", "接口自动化测试工具"))
        self.testCasePathBox.setCurrentIndex(1)  # 设定默认值:demo01
        self.testerBox.setCurrentIndex(0)  # 设定默认值:张涛
        self.reportRunBox.setCurrentIndex(1)  # 设定默认值:默认不生成测试报告
        self.deleteReportBox.setCurrentIndex(1)  # 设定默认值:默认不删除旧报告
        self.sendEmailBox.setCurrentIndex(1)  # 设定默认值:默认不发送邮件
        self.opneNewReportBox.setCurrentIndex(1)  # 设定默认值:默认不打开测试报告
        self.sendDingDingBox.setCurrentIndex(1)  # 设定默认值:默认不发送消息
        self.emvironment_listBox.setCurrentIndex(1)  # 默认115环境
        # self.resultLogEdit.setPlainText(str(res)) # 只读日志

        self.selectEnvTitle.setText(_translate("ApiAutoTool", "请先选择执行环境"))
        self.testcase_txt.setText(_translate("ApiAutoTool", "执行的文件:"))
        self.deletereport_txt.setText(_translate("ApiAutoTool", "删除旧报告:"))
        self.saverepor_txt.setText(_translate("ApiAutoTool", "生成报告:"))
        self.send_email_txt.setText(_translate("ApiAutoTool", "发送邮件:"))
        self.open_report_txt.setText(_translate("ApiAutoTool", "打开新报告:"))
        self.tester_txt.setText(_translate("ApiAutoTool", "测试人员:"))
        self.send_dingding_txt.setText(_translate("ApiAutoTool", "发送钉钉:"))
        self.emvironmenttxt.setText(_translate("ApiAutoTool", "测试环境"))
        self.loginTitletxt.setText(_translate("ApiAutoTool", "账号选择"))
        self.runButton.setText(_translate("ApiAutoTool", "运行"))
        self.seeReportButton.setText(_translate("ApiAutoTool", "查看报告"))
        self.resetButton.setText(_translate("ApiAutoTool", "清除结果"))

    def get_testCasePathBox_info(self):
        """
        :return:
        """
        return self.testCasePathBox.currentText()

    def get_testerBox_info(self):
        """
        :return:
        """
        return self.testerBox.currentText()

    def get_reportRunBox_info(self):
        """
        :return:
        """
        return self.reportRunBox.currentText()

    def get_deleteReportBox_info(self):
        """
        :return:
        """
        return self.deleteReportBox.currentText()

    def get_sendEmailBox_info(self):
        """
        :return:
        """
        return self.sendEmailBox.currentText()

    def get_opneNewReportBox_info(self):
        """
        :return:
        """
        return self.opneNewReportBox.currentText()

    def get_sendDingDingBox_info(self):
        """
        :return:
        """
        return self.sendDingDingBox.currentText()

    def get_emvironmentBox_info(self):
        """
        :return:
        """
        return self.emvironment_listBox.currentText()

    def get_loginTitleBox_info(self):
        """
        :return:
        """
        return self.loginTitleBox.currentText()

    def updateLoginTitleBox_info(self):
        """
        :return:
        """
        self.loginTitleBox.clear()
        environment_name = self.emvironment_listBox.currentText()
        login_title = Config().get_login_user_title(environment_name)
        self.loginTitleBox.addItems(login_title)

    def runButton_info(self):
        """
        :return:
        """
        info_dict = {}
        # 执行文件
        TESTCASEPATH = self.get_testCasePathBox_info()
        # 环境信息
        ENVIRONMENT = self.get_emvironmentBox_info()
        # 登录用户选择
        LOGIN_TITLE = self.get_loginTitleBox_info()
        # 登录接口域名
        APIHOST = Config().get_apihoet(ENVIRONMENT)
        # 获取token的地址
        BASEHOST = Config().get_basehost(ENVIRONMENT)
        # 登录接口地址
        LOGINHOST = Config().get_loginHost(ENVIRONMENT)
        # 登录账号得username
        USERNAME = Config().get_login_username(ENVIRONMENT, self.get_loginTitleBox_info())
        # 登录入参
        LOGINDATA = Config().get_login_data(ENVIRONMENT, self.get_loginTitleBox_info())
        # 本次执行人员
        TESTER = self.get_testerBox_info()
        # 是否开启删除历史报告功能,字符串列表转换eval
        DELETE_ON_OFF = self.get_deleteReportBox_info()
        # 是否开启生成报告功能
        SAVE_ON_OFF = self.get_reportRunBox_info()
        # 是否开启发送邮件功能
        EMAIL_ON_OFF = self.get_sendEmailBox_info()
        # 运行结束是否直接打开报告
        OPEN_REPORY_ON_OFF = self.get_opneNewReportBox_info()
        # 发送钉钉
        DINGDING_NEWS_ON_OFF = self.get_sendDingDingBox_info()


        info_dict['testcase_path'] = TESTCASEPATH
        info_dict['emvironment'] = ENVIRONMENT
        info_dict['login_user'] = LOGIN_TITLE
        info_dict['api_host'] = APIHOST
        info_dict['base_host'] = BASEHOST
        info_dict['login_host'] = LOGINHOST
        info_dict['login_usernaem'] = USERNAME
        info_dict['login_data'] = LOGINDATA
        info_dict['tester'] = TESTER
        info_dict['delete_old_report'] = DELETE_ON_OFF
        info_dict['input_report'] = SAVE_ON_OFF
        info_dict['delete_report_on_off'] = DELETE_ON_OFF
        info_dict['save_report_on_off'] = SAVE_ON_OFF
        info_dict['email_on_off'] = EMAIL_ON_OFF
        info_dict['open_report_on_off'] = OPEN_REPORY_ON_OFF
        info_dict['send_dingding_on_off'] = DINGDING_NEWS_ON_OFF

        with open(setting.PYQT5_FILE, "w") as f:
            f.write(str(info_dict))

        run_api(ENVIRONMENT, TESTER, DELETE_ON_OFF, SAVE_ON_OFF, EMAIL_ON_OFF,
                OPEN_REPORY_ON_OFF, DINGDING_NEWS_ON_OFF)

        """info_dict= {}

        """
        # return info_dict


if __name__ == '__main__':
    apps = QApplication(sys.argv)
    MainWindow = QMainWindow()
    ui = UiApiAutoTool()
    ui.setupUi(MainWindow)
    MainWindow.show()
    exit(apps.exec_())
