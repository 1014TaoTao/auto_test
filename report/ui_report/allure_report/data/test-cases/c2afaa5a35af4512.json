{
  "uid" : "c2afaa5a35af4512",
  "name" : "test_01",
  "fullName" : "testCase.ui.test_baidu.TestBaiDu#test_01",
  "historyId" : "cafdc1e2b84c36682f7492c461018890",
  "time" : {
    "start" : 1657164818020,
    "stop" : 1657164818020,
    "duration" : 0
  },
  "description" : "test_01",
  "descriptionHtml" : "<p>test_01</p>\n",
  "status" : "broken",
  "statusMessage" : "NameError: 没有找到 Chrome 浏览器,请确认 'ie','firefox','chrome','RChrome','RIe' or 'RFirefox'是否存在或名称是否正确.",
  "statusTrace" : "browser = 'Chrome', remote_address = None\n\n    def select_browser(browser=setting.BROWSER, remote_address=None):\n        driver = None\n        start_time = time.time()\n        dc = {'platform': 'ANY', 'browserName': 'chrome', 'version': '', 'javascriptEnabled': True}\n        try:\n            if remote_address is None:  # web端\n                if browser == \"chrome\" or browser == \"Chrome\":\n>                   driver = webdriver.Chrome(service=Service(setting.DRIVER))\n\nbasepage\\browser.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"None\")>\nexecutable_path = 'chromedriver', port = 0, options = None, service_args = None\ndesired_capabilities = None, service_log_path = None, chrome_options = None\nservice = <selenium.webdriver.chrome.service.Service object at 0x000001991EECDF70>\nkeep_alive = True\n\n    def __init__(self, executable_path=DEFAULT_EXECUTEABLE_PATH, port=DEFAULT_PORT,\n                 options: Options = None, service_args=None,\n                 desired_capabilities=None, service_log_path=DEFAULT_SERVICE_LOG_PATH,\n                 chrome_options=None, service: Service = None, keep_alive=DEFAULT_KEEP_ALIVE):\n        \"\"\"\n        Creates a new instance of the chrome driver.\n        Starts the service and then creates new instance of chrome driver.\n    \n        :Args:\n         - executable_path - Deprecated: path to the executable. If the default is used it assumes the executable is in the $PATH\n         - port - Deprecated: port you would like the service to run, if left as 0, a free port will be found.\n         - options - this takes an instance of ChromeOptions\n         - service - Service object for handling the browser driver if you need to pass extra details\n         - service_args - Deprecated: List of args to pass to the driver service\n         - desired_capabilities - Deprecated: Dictionary object with non-browser specific\n           capabilities only, such as \"proxy\" or \"loggingPref\".\n         - service_log_path - Deprecated: Where to log information from the driver.\n         - keep_alive - Deprecated: Whether to configure ChromeRemoteConnection to use HTTP keep-alive.\n        \"\"\"\n        if executable_path != 'chromedriver':\n            warnings.warn('executable_path has been deprecated, please pass in a Service object',\n                          DeprecationWarning, stacklevel=2)\n        if chrome_options:\n            warnings.warn('use options instead of chrome_options',\n                          DeprecationWarning, stacklevel=2)\n            options = chrome_options\n        if keep_alive != DEFAULT_KEEP_ALIVE:\n            warnings.warn('keep_alive has been deprecated, please pass in a Service object',\n                          DeprecationWarning, stacklevel=2)\n        else:\n            keep_alive = True\n        if not service:\n            service = Service(executable_path, port, service_args, service_log_path)\n    \n>       super(WebDriver, self).__init__(DesiredCapabilities.CHROME['browserName'], \"goog\",\n                                        port, options,\n                                        service_args, desired_capabilities,\n                                        service_log_path, service, keep_alive)\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"None\")>\nbrowser_name = 'chrome', vendor_prefix = 'goog', port = 0\noptions = <selenium.webdriver.chrome.options.Options object at 0x000001991EEE39A0>\nservice_args = None, desired_capabilities = None, service_log_path = None\nservice = <selenium.webdriver.chrome.service.Service object at 0x000001991EECDF70>\nkeep_alive = True\n\n    def __init__(self, browser_name, vendor_prefix,\n                 port=DEFAULT_PORT, options: BaseOptions = None, service_args=None,\n                 desired_capabilities=None, service_log_path=DEFAULT_SERVICE_LOG_PATH,\n                 service: Service = None, keep_alive=DEFAULT_KEEP_ALIVE):\n        \"\"\"\n        Creates a new WebDriver instance of the ChromiumDriver.\n        Starts the service and then creates new WebDriver instance of ChromiumDriver.\n    \n        :Args:\n         - browser_name - Browser name used when matching capabilities.\n         - vendor_prefix - Company prefix to apply to vendor-specific WebDriver extension commands.\n         - port - Deprecated: port you would like the service to run, if left as 0, a free port will be found.\n         - options - this takes an instance of ChromiumOptions\n         - service_args - Deprecated: List of args to pass to the driver service\n         - desired_capabilities - Deprecated: Dictionary object with non-browser specific\n           capabilities only, such as \"proxy\" or \"loggingPref\".\n         - service_log_path - Deprecated: Where to log information from the driver.\n         - keep_alive - Deprecated: Whether to configure ChromiumRemoteConnection to use HTTP keep-alive.\n        \"\"\"\n        if desired_capabilities:\n            warnings.warn('desired_capabilities has been deprecated, please pass in a Service object',\n                          DeprecationWarning, stacklevel=2)\n        if port != DEFAULT_PORT:\n            warnings.warn('port has been deprecated, please pass in a Service object',\n                          DeprecationWarning, stacklevel=2)\n        self.port = port\n        if service_log_path != DEFAULT_SERVICE_LOG_PATH:\n            warnings.warn('service_log_path has been deprecated, please pass in a Service object',\n                          DeprecationWarning, stacklevel=2)\n        if keep_alive != DEFAULT_KEEP_ALIVE and type(self) == __class__:\n            warnings.warn('keep_alive has been deprecated, please pass in a Service object',\n                          DeprecationWarning, stacklevel=2)\n        else:\n            keep_alive = True\n    \n        self.vendor_prefix = vendor_prefix\n    \n        _ignore_proxy = None\n        if not options:\n            options = self.create_options()\n    \n        if desired_capabilities:\n            for key, value in desired_capabilities.items():\n                options.set_capability(key, value)\n    \n        if options._ignore_local_proxy:\n            _ignore_proxy = options._ignore_local_proxy\n    \n        if not service:\n            raise AttributeError('service cannot be None')\n    \n        self.service = service\n        self.service.start()\n    \n        try:\n>           RemoteWebDriver.__init__(\n                self,\n                command_executor=ChromiumRemoteConnection(\n                    remote_server_addr=self.service.service_url,\n                    browser_name=browser_name, vendor_prefix=vendor_prefix,\n                    keep_alive=keep_alive, ignore_proxy=_ignore_proxy),\n                options=options)\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"None\")>\ncommand_executor = <selenium.webdriver.chromium.remote_connection.ChromiumRemoteConnection object at 0x000001991EEE3F10>\ndesired_capabilities = None, browser_profile = None, proxy = None\nkeep_alive = True, file_detector = None\noptions = <selenium.webdriver.chrome.options.Options object at 0x000001991EEE39A0>\n\n    def __init__(self, command_executor='http://127.0.0.1:4444',\n                 desired_capabilities=None, browser_profile=None, proxy=None,\n                 keep_alive=True, file_detector=None, options: Union[BaseOptions, List[BaseOptions]] = None):\n        \"\"\"\n        Create a new driver that will issue commands using the wire protocol.\n    \n        :Args:\n         - command_executor - Either a string representing URL of the remote server or a custom\n             remote_connection.RemoteConnection object. Defaults to 'http://127.0.0.1:4444/wd/hub'.\n         - desired_capabilities - A dictionary of capabilities to request when\n             starting the browser session. Required parameter.\n         - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.\n             Only used if Firefox is requested. Optional.\n         - proxy - A selenium.webdriver.common.proxy.Proxy object. The browser session will\n             be started with given proxy settings, if possible. Optional.\n         - keep_alive - Whether to configure remote_connection.RemoteConnection to use\n             HTTP keep-alive. Defaults to True.\n         - file_detector - Pass custom file detector object during instantiation. If None,\n             then default LocalFileDetector() will be used.\n         - options - instance of a driver options.Options class\n        \"\"\"\n        if desired_capabilities:\n            warnings.warn(\n                \"desired_capabilities has been deprecated, please pass in an Options object with options kwarg\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n        if browser_profile:\n            warnings.warn(\n                \"browser_profile has been deprecated, please pass in an Firefox Options object with options kwarg\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n        if proxy:\n            warnings.warn(\n                \"proxy has been deprecated, please pass in an Options object with options kwarg\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n        if not keep_alive:\n            warnings.warn(\n                \"keep_alive has been deprecated. We will be using True as the default value as we start removing it.\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n        capabilities = {}\n        # If we get a list we can assume that no capabilities\n        # have been passed in\n        if isinstance(options, list):\n            capabilities = create_matches(options)\n        else:\n            _ignore_local_proxy = False\n            if options:\n                capabilities = options.to_capabilities()\n                _ignore_local_proxy = options._ignore_local_proxy\n            if desired_capabilities:\n                if not isinstance(desired_capabilities, dict):\n                    raise WebDriverException(\"Desired Capabilities must be a dictionary\")\n                else:\n                    capabilities.update(desired_capabilities)\n        self.command_executor = command_executor\n        if isinstance(self.command_executor, (str, bytes)):\n            self.command_executor = get_remote_connection(capabilities, command_executor=command_executor,\n                                                          keep_alive=keep_alive,\n                                                          ignore_local_proxy=_ignore_local_proxy)\n        self._is_remote = True\n        self.session_id = None\n        self.caps = {}\n        self.pinned_scripts = {}\n        self.error_handler = ErrorHandler()\n        self._switch_to = SwitchTo(self)\n        self._mobile = Mobile(self)\n        self.file_detector = file_detector or LocalFileDetector()\n        self.start_client()\n>       self.start_session(capabilities, browser_profile)\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:268: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"None\")>\ncapabilities = {'browserName': 'chrome', 'goog:chromeOptions': {'args': [], 'extensions': []}, 'pageLoadStrategy': 'normal'}\nbrowser_profile = None\n\n    def start_session(self, capabilities: dict, browser_profile=None) -> None:\n        \"\"\"\n        Creates a new session with the desired capabilities.\n    \n        :Args:\n         - capabilities - a capabilities dict to start the session with.\n         - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object. Only used if Firefox is requested.\n        \"\"\"\n        if not isinstance(capabilities, dict):\n            raise InvalidArgumentException(\"Capabilities must be a dictionary\")\n        if browser_profile:\n            if \"moz:firefoxOptions\" in capabilities:\n                capabilities[\"moz:firefoxOptions\"][\"profile\"] = browser_profile.encoded\n            else:\n                capabilities.update({'firefox_profile': browser_profile.encoded})\n        w3c_caps = _make_w3c_caps(capabilities)\n        parameters = {\"capabilities\": w3c_caps,\n                      \"desiredCapabilities\": capabilities}\n>       response = self.execute(Command.NEW_SESSION, parameters)\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:359: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"None\")>\ndriver_command = 'newSession'\nparams = {'capabilities': {'alwaysMatch': {'browserName': 'chrome', 'goog:chromeOptions': {'args': [], 'extensions': []}, 'page...lities': {'browserName': 'chrome', 'goog:chromeOptions': {'args': [], 'extensions': []}, 'pageLoadStrategy': 'normal'}}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:424: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001991EEE3E80>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...unk [0x76436739+25]\\\\n\\\\tRtlGetFullPathName_UEx [0x77D38FEF+1215]\\\\n\\\\tRtlGetFullPathName_UEx [0x77D38FBD+1165]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 100\nE       Current browser version is 103.0.5060.53 with binary path C:\\Users\\tao\\AppData\\Local\\Google\\Chrome\\Application\\chrome.exe\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00347413+2389011]\nE       \tOrdinal0 [0x002D9F61+1941345]\nE       \tOrdinal0 [0x001CC658+837208]\nE       \tOrdinal0 [0x001EC773+968563]\nE       \tOrdinal0 [0x001E837A+951162]\nE       \tOrdinal0 [0x001E5C51+941137]\nE       \tOrdinal0 [0x00218C80+1150080]\nE       \tOrdinal0 [0x002188DA+1149146]\nE       \tOrdinal0 [0x00213F66+1130342]\nE       \tOrdinal0 [0x001EE546+976198]\nE       \tOrdinal0 [0x001EF456+980054]\nE       \tGetHandleVerifier [0x004F9632+1727522]\nE       \tGetHandleVerifier [0x005ABA4D+2457661]\nE       \tGetHandleVerifier [0x003DEB81+569713]\nE       \tGetHandleVerifier [0x003DDD76+566118]\nE       \tOrdinal0 [0x002E0B2B+1968939]\nE       \tOrdinal0 [0x002E5988+1989000]\nE       \tOrdinal0 [0x002E5A75+1989237]\nE       \tOrdinal0 [0x002EECB1+2026673]\nE       \tBaseThreadInitThunk [0x76436739+25]\nE       \tRtlGetFullPathName_UEx [0x77D38FEF+1215]\nE       \tRtlGetFullPathName_UEx [0x77D38FBD+1165]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: SessionNotCreatedException\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.fixture(scope=\"session\", autouse=True)\n    def init_project():\n        global driver\n        with allure.step(\"打开浏览器并最大化\"):\n            if driver is None:\n>               driver = select_browser()\n\ntestCase\\ui\\conftest.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nbrowser = 'Chrome', remote_address = None\n\n    def select_browser(browser=setting.BROWSER, remote_address=None):\n        driver = None\n        start_time = time.time()\n        dc = {'platform': 'ANY', 'browserName': 'chrome', 'version': '', 'javascriptEnabled': True}\n        try:\n            if remote_address is None:  # web端\n                if browser == \"chrome\" or browser == \"Chrome\":\n                    driver = webdriver.Chrome(service=Service(setting.DRIVER))\n                elif browser == \"firefox\" or browser == \"Firefox\":\n                    driver = webdriver.Firefox()\n                elif browser == \"internet explorer\" or browser == \"ie\":\n                    driver = webdriver.Ie()\n                elif browser == \"opera\":\n                    driver = webdriver.Opera()\n                elif browser == \"edge\":\n                    driver = webdriver.Edge()\n            else:  # 移动端\n                if browser == \"RChrome\":\n                    driver = webdriver.Remote(command_executor='https://' + remote_address + '/wd/hub',\n                                              desired_capabilities=dc)\n                elif browser == \"RIE\":\n                    dc['browserName'] = 'internet explorer'\n                    driver = webdriver.Remote(command_executor='https://' + remote_address + '/wd/hub',\n                                              desired_capabilities=dc)\n                elif browser == \"RFirefox\":\n                    dc['browserName'] = 'firefox'\n                    dc['marionette'] = False\n                    driver = webdriver.Remote(command_executor='https://' + remote_address + '/wd/hub',\n                                              desired_capabilities=dc)\n            logger.info(\n                \"{0}==> 开启浏览器: {1}, 共花费 {2} 秒\".format(success, browser, \"%.4f\" % (time.time() - start_time)))\n    \n        except Exception:\n>           raise NameError(\"没有找到 {0} 浏览器,请确认 'ie','firefox',\"\n                            \"'chrome','RChrome','RIe' or 'RFirefox'是否存在或名称是否正确.\".format(browser))\nE           NameError: 没有找到 Chrome 浏览器,请确认 'ie','firefox','chrome','RChrome','RIe' or 'RFirefox'是否存在或名称是否正确.\n\nbasepage\\browser.py:50: NameError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ {
    "name" : "_session_faker",
    "time" : {
      "start" : 1657164818025,
      "stop" : 1657164818214,
      "duration" : 189
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false,
    "stepsCount" : 0
  }, {
    "name" : "init_project",
    "time" : {
      "start" : 1657164818215,
      "stop" : 1657164824610,
      "duration" : 6395
    },
    "status" : "broken",
    "statusMessage" : "NameError: 没有找到 Chrome 浏览器,请确认 'ie','firefox','chrome','RChrome','RIe' or 'RFirefox'是否存在或名称是否正确.\n",
    "statusTrace" : "  File \"E:\\pytest_auto_uitest_apitest\\venv\\lib\\site-packages\\pluggy\\_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n  File \"E:\\pytest_auto_uitest_apitest\\venv\\lib\\site-packages\\_pytest\\fixtures.py\", line 1126, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"E:\\pytest_auto_uitest_apitest\\venv\\lib\\site-packages\\_pytest\\fixtures.py\", line 925, in call_fixture_func\n    fixture_result = next(generator)\n  File \"E:\\pytest_auto_uitest_apitest\\testCase\\ui\\conftest.py\", line 32, in init_project\n    driver = select_browser()\n  File \"E:\\pytest_auto_uitest_apitest\\basepage\\browser.py\", line 50, in select_browser\n    raise NameError(\"没有找到 {0} 浏览器,请确认 'ie','firefox',\"\n",
    "steps" : [ {
      "name" : "打开浏览器并最大化",
      "time" : {
        "start" : 1657164818215,
        "stop" : 1657164824579,
        "duration" : 6364
      },
      "status" : "broken",
      "statusMessage" : "NameError: 没有找到 Chrome 浏览器,请确认 'ie','firefox','chrome','RChrome','RIe' or 'RFirefox'是否存在或名称是否正确.\n",
      "statusTrace" : "  File \"E:\\pytest_auto_uitest_apitest\\testCase\\ui\\conftest.py\", line 32, in init_project\n    driver = select_browser()\n  File \"E:\\pytest_auto_uitest_apitest\\basepage\\browser.py\", line 50, in select_browser\n    raise NameError(\"没有找到 {0} 浏览器,请确认 'ie','firefox',\"\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true,
      "stepsCount" : 0
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : true,
    "stepsCount" : 1
  } ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "story二级标签:test_01"
  }, {
    "name" : "epic",
    "value" : "test_01"
  }, {
    "name" : "severity",
    "value" : "blocker"
  }, {
    "name" : "feature",
    "value" : "feature一级标签:百度测试用例"
  }, {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('init_project')"
  }, {
    "name" : "parentSuite",
    "value" : "testCase.ui"
  }, {
    "name" : "suite",
    "value" : "test_baidu"
  }, {
    "name" : "subSuite",
    "value" : "TestBaiDu"
  }, {
    "name" : "host",
    "value" : "xxx"
  }, {
    "name" : "thread",
    "value" : "7940-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testCase.ui.test_baidu"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ {
    "name" : "allure.testcase：测试用例地址",
    "url" : "https://www.baidu.com/",
    "type" : "test_case"
  }, {
    "name" : "allure.issue：BUG地址",
    "url" : "https://www.baidu.com/",
    "type" : "issue"
  }, {
    "name" : "allure.link：超链接",
    "url" : "https://www.baidu.com/",
    "type" : "link"
  } ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "@pytest.mark.usefixtures('init_project')" ]
  },
  "source" : "c2afaa5a35af4512.json",
  "parameterValues" : [ ]
}